@function bdrs($key) {
	@return map($border-radius, $key, "Nonexistent border-radius.");
}

@function c($key) {
	@return map($color, $key, "Nonexistent color.");
}

@function em($font-size, $values) {
	@if type-of($font-size) == number and unitless($font-size) {
		$list: ();
		@each $value in $values {
			@if type-of($value) == number and unitless($value) {
				@if $value != 0 {
					$list: append($list, ($value / $font-size) + em);
				}
				@else {
					$list: append($list, $value);
				}
			}
			@else {
				@error "$values argument must be one or multiple unitless numbers.";
				@return null;
			}
		}
		@return $list;
	}
	@error "$font-size argument must be a unitless number.";
	@return null;
}

@function ff($key) {
	@return map($font-family, $key, "Nonexistent font-family.");
}

@function grid($key) {
	@return map($grid, $key, "Nonexistent $grid key.");
}

@function lh($font-size, $value) {
	@if type-of($font-size) == number and unitless($font-size) {
		@if type-of($value) == number and unitless($value) {
			@return $value / $font-size;
		}
		@error "$value argument must be a unitless number.";
		@return null;
	}
	@error "$font-size argument must be a unitless number.";
	@return null;
}

@function map($map, $key, $message) {
	@if map-has-key($map, $key) {
		@return map-get($map, $key);
	}
	@error "#{$message}";
	@return null;
}

@function trsdu($key) {
	@return map($transition-duration, $key, "Nonexistent transition-duration.");
}

@function w($columns, $unit: "%") {
	@if type-of($columns) == number and unitless($columns) and $columns != 0 {
		@if $unit == "%" {
			@return 100% / (grid("columns") / $columns);
		}
		@else if $unit == "rem" {
			@return ((grid("width") + grid("gutter")) * $columns) - grid("gutter");
		}
		@error "Undefined $unit argument.";
		@return null;
	}
	@error "$columns argument must be a non-zero unitless number.";
	@return null;
}

@function z($key) {
	@return map($z-index, $key, "Nonexistent z-index.");
}